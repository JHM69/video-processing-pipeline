name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: video-processor-cluster
  GKE_ZONE: us-central1
  FRONTEND_IMAGE: gcr.io/${{ secrets.GCP_PROJECT_ID }}/video-processor-frontend
  BACKEND_IMAGE: gcr.io/${{ secrets.GCP_PROJECT_ID }}/video-processor-backend

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: backend/src/video_processor/requirements.txt

      - name: Install Frontend Dependencies
        working-directory: frontend
        run: npm ci

      - name: Install Backend Dependencies
        working-directory: backend/src/video_processor
        run: pip install -r requirements.txt

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker and Container Registry
        run: |
          # Configure Docker authentication
          gcloud auth configure-docker --quiet
          
          # Check if APIs are already enabled
          if ! gcloud services list --enabled --filter="name:containerregistry.googleapis.com" --format="value(name)" | grep -q "containerregistry.googleapis.com"; then
            echo "Container Registry API is not enabled. Attempting to enable..."
            gcloud services enable containerregistry.googleapis.com || echo "Warning: Could not enable Container Registry API. Please ensure it's enabled manually or the service account has necessary permissions."
          fi
          
          if ! gcloud services list --enabled --filter="name:artifactregistry.googleapis.com" --format="value(name)" | grep -q "artifactregistry.googleapis.com"; then
            echo "Artifact Registry API is not enabled. Attempting to enable..."
            gcloud services enable artifactregistry.googleapis.com || echo "Warning: Could not enable Artifact Registry API. Please ensure it's enabled manually or the service account has necessary permissions."
          fi
          
          # Verify access to Container Registry
          echo "Verifying Container Registry access..."
          if ! gcloud container images list --repository=gcr.io/${{ secrets.GCP_PROJECT_ID }} 2>/dev/null; then
            echo "Setting up Container Registry..."
            gcloud container images list --repository=gcr.io/${{ secrets.GCP_PROJECT_ID }} >/dev/null 2>&1 || echo "Warning: Could not access Container Registry. Please ensure the service account has necessary permissions."
          fi
          
          # Continue with the workflow even if API enabling fails
          # The build steps will fail if the required access is not available

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Build Frontend Image
        run: |
          docker build -t ${{ env.FRONTEND_IMAGE }}:${{ github.sha }} ./frontend
          docker tag ${{ env.FRONTEND_IMAGE }}:${{ github.sha }} ${{ env.FRONTEND_IMAGE }}:latest

      - name: Build Backend Image
        run: |
          docker build -t ${{ env.BACKEND_IMAGE }}:${{ github.sha }} ./backend/src/video_processor
          docker tag ${{ env.BACKEND_IMAGE }}:${{ github.sha }} ${{ env.BACKEND_IMAGE }}:latest

      - name: Push Frontend Image
        run: |
          docker push ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          docker push ${{ env.FRONTEND_IMAGE }}:latest

      - name: Push Backend Image
        run: |
          docker push ${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          docker push ${{ env.BACKEND_IMAGE }}:latest

  deploy:
    needs: test-and-build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Update Kubernetes Manifests
        run: |
          # Update image tags in deployment files to use SHA tags for immutability
          sed -i "s|gcr.io/PROJECT_ID/video-processor-frontend:.*|${{ env.FRONTEND_IMAGE }}:${{ github.sha }}|" k8s/frontend.yaml
          sed -i "s|gcr.io/PROJECT_ID/video-processor-backend:.*|${{ env.BACKEND_IMAGE }}:${{ github.sha }}|" k8s/backend.yaml

      - name: Deploy to GKE
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/redis.yaml
          
          # Delete old ReplicaSets to ensure clean deployment
          kubectl delete rs -n video-processor -l app=frontend --cascade=false || true
          kubectl delete rs -n video-processor -l app=backend --cascade=false || true
          
          kubectl apply -f k8s/backend.yaml
          kubectl apply -f k8s/frontend.yaml
          
          # Wait for old pods to be terminated
          kubectl wait --for=delete pod -l app=frontend -n video-processor --timeout=60s || true
          kubectl wait --for=delete pod -l app=backend -n video-processor --timeout=60s || true

      - name: Verify Deployment
        run: |
          echo "Checking pod status..."
          kubectl get pods -n video-processor
          
          echo "\nChecking pod logs for frontend..."
          kubectl logs -l app=frontend -n video-processor --tail=50 || true
          
          echo "\nChecking pod events..."
          kubectl get events -n video-processor --sort-by='.lastTimestamp'
          
          # Add verification delays to allow for image pulls
          sleep 30
          
          echo "\nWaiting for redis deployment..."
          kubectl wait --for=condition=ready pod -l app=redis --timeout=300s -n video-processor || {
            echo "Redis pods not ready. Checking redis pods status:"
            kubectl describe pods -l app=redis -n video-processor
          }
          
          echo "\nWaiting for backend deployment..."
          kubectl wait --for=condition=ready pod -l app=backend --timeout=300s -n video-processor || {
            echo "Backend pods not ready. Checking backend pods status:"
            kubectl describe pods -l app=backend -n video-processor
          }
          
          echo "\nWaiting for frontend deployment..."
          kubectl wait --for=condition=ready pod -l app=frontend --timeout=600s -n video-processor || {
            echo "Frontend pods not ready. Checking frontend pods status:"
            kubectl describe pods -l app=frontend -n video-processor
            echo "\nChecking frontend deployment status:"
            kubectl describe deployment frontend -n video-processor
            
            echo "\nChecking image pull status:"
            kubectl get pods -l app=frontend -n video-processor -o jsonpath='{.items[*].status.containerStatuses[*].imageID}'
            exit 1
          }
          
          echo "All deployments verified successfully!"

      - name: Get Frontend Service Address
        if: success()
        run: |
          echo "Checking frontend service configuration..."
          kubectl describe service frontend -n video-processor
          
          echo "\nWaiting for Load Balancer to be ready..."
          # Wait for Load Balancer to get external IP (timeout after 5 minutes)
          for i in {1..30}; do
            FRONTEND_IP=$(kubectl get service frontend -n video-processor -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ ! -z "$FRONTEND_IP" ]; then
              break
            fi
            echo "Waiting for external IP... ($i/30)"
            sleep 10
          done

          if [ -z "$FRONTEND_IP" ]; then
            echo "::warning::Couldn't get LoadBalancer IP after 5 minutes"
            echo "Current service status:"
            kubectl get service frontend -n video-processor -o yaml
          else
            echo "Frontend is accessible at: http://$FRONTEND_IP"
          fi
          
          # Also check for any Ingress
          if kubectl get ingress -n video-processor &>/dev/null; then
            echo "\nChecking Ingress configuration..."
            kubectl describe ingress -n video-processor
            INGRESS_HOST=$(kubectl get ingress -n video-processor -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}')
            if [ ! -z "$INGRESS_HOST" ]; then
              echo "Frontend is also accessible via Ingress at: http://$INGRESS_HOST"
            fi
          fi